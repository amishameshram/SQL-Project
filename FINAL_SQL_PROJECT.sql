DROP TABLE IF EXISTS Books;
CREATE TABLE Books(
		Book_ID	SERIAL PRIMARY KEY,
		Title VARCHAR(100),
		Author VARCHAR(100),
		Genre VARCHAR(50),
		Published_Year INT,
		Price NUMERIC(10, 2),
		Stock INT

);
SELECT * FROM Books;

DROP TABLE IF EXISTS Customer;
CREATE TABLE Customer(
		Customer_ID SERIAL PRIMARY KEY,
		Name VARCHAR(100),
		Email VARCHAR(100),
		Phone VARCHAR(15),
		City VARCHAR(50),
		Country VARCHAR(150)


);
SELECT * FROM Customer; 

DROP TABLE IF EXISTS Orders;
CREATE TABLE Orders(
		Order_ID SERIAL PRIMARY KEY,
		Customer_ID INT REFERENCES Customer(Customer_ID),
		Book_ID INT REFERENCES Books(Book_ID),
		Order_Date DATE,
		Quantity INT,
		Total_Amount NUMERIC(10, 2)



);
SELECT * FROM Orders; 

--IMPORT DATA INTO BookS TABLE
COPY Books(Book_ID,	Title,	Author,	Genre,	Published_Year,	Price,	Stock)
FROM 'D:\PostgreSQL\Project\Books.csv'
CSV HEADER;

--IMPORT DATA INTO Customer TABLE
COPY Customer(Customer_ID,	Name,	Email,	Phone,	City,	Country)
FROM 'D:\PostgreSQL\Project\Customers.csv'
CSV HEADER;

--IMPORT DATA INTO Order TABLE
COPY Orders(Order_ID,	Customer_ID,	Book_ID,	Order_Date,	Quantity,	Total_Amount)
FROM 'D:\PostgreSQL\Project\Orders.csv'
CSV HEADER;


--1) RETRIVE ALL BOOKS IN THE "FICTION GENRE:
SELECT * FROM Books
WHERE Genre='Fiction';


--2)FIND BOOK PUBLESHED AFTER THE YEAR 1950:
SELECT * FROM Books 
WHERE Published_Year=1950


--3)LIST ALL CUSTOMERS FROM THE CANADA:
SELECT * FROM Customer
WHERE country='Canada'

--4)SHOW ORDERD PLACE IN NOVEMBER 2023
SELECT * FROM Orders
WHERE Order_Date BETWEEN '2023-11-01' AND '2023-11-30';


--5)RITRIVE THE TOTAL STOCK OF BOOKS AVAILABLE
SELECT SUM(Stock) AS TOTAL_STOCK 
FROM Books

--6) FIND THE DETAILS OF THE MOST EXPENSIVE BOOK:
SELECT * FROM BOOKS
ORDER BY Price DESC LIMIT 1;


--7) SHOW ALL CUSTOMERS WHO ORDERED MORE THAN 1 QUANTITY OF A BOOKS:
SELECT * FROM Orders
where Quantity>1

--8) RETRIEVE ALL ORDERS WHERE THE TOTAL AMOUNT EXCEEDS $20:
SELECT * FROM Orders
where total_amount>20


--9) LIST ALL GENRES AVALABLE IN THE BOOKS TABLE:
SELECT DISTINCT genre from books


--10) FIND THE BOOK WITH THE LOWEST STOCK:
SELECT * FROM Books
ORDER BY Stock LIMIT 1


--11) CALCULATED THE TOTAL REVENUE GENERATED FROM ALL OEDERS:
SELECT SUM(Total_amount) AS REVENUE FROM ORDERS;


--ADVANCE QUESTIONS

--1) RETRIVEVE THE TOTAL NUBMBER OF BOOKS SOLD FOR EACH GENRE:
SELECT B.Genre, SUM(O.Quantity) AS TOTAL_NUMBER_OF_BOOKS
FROM ORDERS O
JOIN Books B ON O.Book_ID = B.Book_ID 
GROUP BY B.Genre;


--2) FIND THE AVERAGE PRICE OF BOOKS IN THE "FANTASY" GENRE:
SELECT AVG(PRICE) AS AVG_PRICE_OF_BOOKS
FROM Books
WHERE Genre = 'Fantasy';


--3) LIST CUSTOMERS WHO HAVE PLECED AT LEAST TWO ORDERS:
SELECT CUSTOMER_ID, COUNT(ORDER_ID) FROM ORDERS
GROUP BY CUSTOMER_ID
HAVING COUNT(ORDER_ID) >=2;


--4) FIND THE MOST FREQUENTLY ORDERED BOOKS:
SELECT O.Book_ID, B.Title, COUNT(O.ORDER_ID) AS ORDER_COUNT
FROM Orders O
JOIN Books B ON O.BOOK_ID = B.BOOK_ID
GROUP BY O.BOOK_ID, B.Title
ORDER BY ORDER_COUNT DESC LIMIT 1;


--5) SHOE THE TOP 3 MOST EXPENSIVE BOOKS OF "FANTASY" GENRE:
SELECT * FROM Books
WHERE GENRE = 'Fantasy'
ORDER BY PRICE DESC LIMIT 3;


--6) RETRIEVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR:
SELECT B.AUTHOR, SUM(O.QUANTITY) AS TOTAL_BOOK_SOLD
FROM Orders o
join Books b on o.Book_id = b.Book_id
group by b.AUTHOR


--7) LIST THE CITIES WHERE CUSTOMER WHO SPENT OVER $30 ARE LOCATED:
select distinct c.city, o.total_amount 
from Orders o
join Customer c on o.customer_id = c.customer_id
where o.total_amount >30

--8) FIND THE CUSTOMER WHO SPENT THE MOST NO. ORDER:
SELECT C.CUSTOMER_ID, C.NAME, SUM(O.TOTAL_AMOUNT)AS TOTAL_SPENT
FROM ORDERS O
JOIN CUSTOMER C ON O.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.NAME
ORDER BY TOTAL_SPENT DESC LIMIT 1;


--9) CALCULATE THE STOCK REMAINING AFTER FULFILLING ALL ORDERS:
SELECT B.Book_ID, B.Title,B.Stock, COALESCE(SUM(O.QUANTITY),0)AS ORDER_QUANTITY,
		B.Stock- COALESCE(SUM(O.QUANTITY),0) AS REMAINING_QUANTITY
FROM Books B
LEFT JOIN Orders O ON B.Book_ID = O.Book_ID
GROUP BY B.Book_ID ORDER BY B.Book_ID;
